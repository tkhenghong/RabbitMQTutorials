#!/usr/bin/env python
import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()

channel.exchange_declare(exchange='direct_logs', exchange_type='direct')

result = channel.queue_declare(queue='', exclusive=True)
queue_name = result.method.queue

# 1. Reading message types through system arguments retrieved from terminal command, save them into an array variable.
# 2. Check if there's any system arguments in the array variable. If not, throw an error message and exit the program.
# 3. If got elements in the array variable, create a for loop and create bindings to of the same exchange using the declared random queue generated by the RabbitMQ,
# but with different routing_key.
severities = sys.argv[1:]
if not severities:
    sys.stderr.write("Usage: %s [info] [warning] [error]\n" % sys.argv[0])
    sys.exit(1)

for severity in severities:
    channel.queue_bind(
        exchange='direct_logs', queue=queue_name, routing_key=severity)

print(' [*] Waiting for logs. To exit press CTRL+C')

def callback(ch, method, properties, body):
    print(" [x] %r:%r" % (method.routing_key, body))

channel.basic_consume(
    queue=queue_name, on_message_callback=callback, auto_ack=True)

channel.start_consuming()

# How to run:
# If you want to create a same queue but receive more than one type of message (means accept multiple routing_key),
# python receive_logs_direct.py warning error # Only want a random generated queue with storing warning and error message type.

# Create a random queue that accepts all 3 types of messages:
# python receive_logs_direct.py info warning error

# Now send a error message:
# python emit_log_direct.py error "Run. Run. Or it will explode."

# A total of 3 terminals is opened.
# RESULT: 
# Terminal 1 & 2:
#   [x] 'error':'error Run. Run. Or it will explode.'

# But if I sent info message like below command: 
# python emit_log_direct.py info "This is info message."

# RESULT:
# Only Terminal 2:
#  [x] 'info':'info This is info message.'

# If I sent info message like below command:
# python emit_log_direct.py unknown "This is unknown type of message."
# RESULT: None of the terminals will receive the message, even when sent to the direct exchange.